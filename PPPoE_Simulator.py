from scapy.all import *

ac_name = 'PPPoE-Simulator'
service_name = ''
magic_number = 0xDEADBEEF
host_uniq = session_id = ac_cookie = mac_router = mac_server = eth_discovery = eth_session = None
ident = 0

End_Of_List = 0x0000
Service_Name = 0x0101
AC_Name = 0x0102
Host_Uniq = 0x0103
AC_Cookie = 0x0104
Vendor_Specific = 0x0105
Relay_Session_Id = 0x0110
Service_Name_Error = 0x0201
AC_System_Error = 0x0202
Generic_Error = 0x0203

PADI = 0x09
PADO = 0x07
PADR = 0x19
PADS = 0x65
PADT = 0xa7

LCP = 0xc021
PAP = 0xc023
CHAP = 0xc223
IPCP = 0x8021
IPV6CP = 0x8057
PPPoE_Discovery = 0x8863
PPPoE_Session = 0x8864

Configure_Request = 1
Configure_Ack = 2
Authenticate_Ack = 2
Configure_Nak = 3
Configure_Reject = 4
Terminate_Request = 5
Terminate_Ack = 6
Code_Reject = 7
Protocol_Reject = 8
Echo_Request = 9
Echo_Reply = 10
Discard_Request = 11

def packet_callback(pkt):
    global host_uniq, session_id, ident, ac_cookie, mac_router, mac_server, eth_discovery, eth_session
    mac_router = pkt[Ether].src
    eth_discovery = Ether(src=mac_server, dst=mac_router, type=PPPoE_Discovery)
    eth_session = Ether(src=mac_server, dst=mac_router, type=PPPoE_Session)

    if pkt.haslayer(PPPoED):
        if pkt[PPPoED].code == PADI:
            print('Client->Server   |   Discovery Initiation')
            session_id = pkt[PPPoED].fields['sessionid']
            ac_cookie = os.urandom(20)
            for tag in pkt[PPPoED][PPPoED_Tags].tag_list:
                if tag.tag_type == Host_Uniq:
                    host_uniq = tag.tag_value
            sendp(eth_discovery /
                  PPPoED(code=PADO, sessionid=0) /
                  PPPoETag(tag_type=Service_Name, tag_value=service_name) /
                  PPPoETag(tag_type=AC_Name, tag_value=ac_name) /
                  PPPoETag(tag_type=AC_Cookie, tag_value=ac_cookie) /
                  PPPoETag(tag_type=Host_Uniq, tag_value=host_uniq))
            print('Server->Client   |   Discovery Offer')
        elif pkt[PPPoED].code == PADR:
            print('Client->Server   |   Discovery Request')
            session_id = ord(os.urandom(2)[0]) # int
            sendp(eth_discovery /
                  PPPoED(code=PADS, sessionid=session_id) /
                  PPPoETag(tag_type=Service_Name, tag_value=service_name) /
                  PPPoETag(tag_type=Host_Uniq, tag_value=host_uniq))
            print('Server->Client   |   Discovery Session-confirmation')
            sendp(eth_session /
                  PPPoE(sessionid=session_id) /
                  PPP(proto=LCP) /
                  PPP_LCP(code=Configure_Request, id=ident+1,
                          data=(Raw(PPP_LCP_MRU_Option(max_recv_unit=1492)) /
                                Raw(PPP_LCP_Auth_Protocol_Option(auth_protocol=PAP)) /
                                Raw(PPP_LCP_Magic_Number_Option(magic_number=magic_number)))))
            print('Server->Client   |   Configuration Request (PAP)')

    elif pkt.haslayer(PPPoE) and pkt.haslayer(PPP):
        if pkt[PPPoE].sessionid:
            session_id = pkt[PPPoE].sessionid
        if pkt.haslayer(PPP_LCP_Configure):
            ppp_lcp = pkt[PPP_LCP_Configure]
            if pkt[PPP_LCP_Configure].code == Configure_Request:
                print('Client->Server   |   Configuration Request (MRU)')
                ident = pkt[PPP_LCP_Configure].id
                sendp(eth_session /
                      PPPoE(sessionid=session_id) /
                      PPP(proto=LCP) /
                      PPP_LCP(code=Configure_Ack, id=ident,
                              data=(Raw(PPP_LCP_MRU_Option(max_recv_unit=1480)) /
                                    Raw(ppp_lcp[PPP_LCP_Magic_Number_Option]))))
                print('Server->Client   |   Configuration Ack (MRU)')
            elif pkt[PPP_LCP_Configure].code == Configure_Ack:
                print('Client->Server   |   Configuration Ack')
                sendp(eth_session /
                      PPPoE(sessionid=session_id) /
                      PPP(proto=LCP) /
                      PPP_LCP_Echo(code=Echo_Request, id=ident+1, magic_number=magic_number))
                print('Server->Client   |   Echo Request')
        elif pkt.haslayer(PPP_LCP_Echo):
            if pkt[PPP_LCP_Echo].code == Echo_Request:
                print('Client->Server   |   Echo Request')
                ident = pkt[PPP_LCP_Echo].id
                sendp(eth_session /
                      PPPoE(sessionid=session_id) /
                      PPP(proto=LCP) /
                      PPP_LCP_Echo(code=Echo_Reply, id=ident, magic_number=magic_number))
                print('Server->Client   |   Echo Reply')
        elif pkt.haslayer(PPP_PAP_Request):
            print('Client->Server   |   Authentication Request')
            ident = pkt[PPP_PAP_Request].id
            sendp(eth_session /
                  PPPoE(sessionid=session_id) /
                  PPP(proto=PAP) /
                  PPP_PAP_Response(code=Authenticate_Ack, id=ident, message='Login ok'))
            print('Server->Client   |   Authenticate Ack')
            sendp(eth_session /
                  PPPoE(sessionid=session_id) /
                  PPP(proto=IPCP) /
                  PPP_IPCP(code=Configure_Request, id=ident+1,
                           options=PPP_IPCP_Option_IPAddress(data='10.15.0.8')))
            print('Server->Client   |   Configuration Request (IP)')
        elif pkt.haslayer(PPP_IPCP):
            ident = pkt[PPP_IPCP].id
            if pkt[PPP_IPCP].options[0].data == '0.0.0.0':
                print('Client->Server   |   Configuration Request (invalid)')
                options = [PPP_IPCP_Option_IPAddress(data='10.16.0.9'),
                           PPP_IPCP_Option_DNS1(data='223.5.5.5'),
                           PPP_IPCP_Option_DNS2(data='223.6.6.6')]
                sendp(eth_session /
                      PPPoE(sessionid=session_id) /
                      PPP(proto=IPCP) /
                      PPP_IPCP(code=Configure_Nak, id=ident, options=options))
                print('Server->Client   |   Configuration Nak')
            else:
                print('Client->Server   |   Configuration Request (valid)')
                sendp(eth_session /
                      PPPoE(sessionid=session_id) /
                      PPP(proto=IPCP) /
                      PPP_IPCP(code=Configure_Ack, id=ident, options=pkt[PPP_IPCP].options))
                print('Server->Client   |   Configuration Ack')
        if pkt[PPP].proto == IPV6CP:
            print('Client->Server   |   Configuration Request IPV6CP')
            sendp(eth_session /
                  PPPoE(sessionid=session_id) /
                  PPP(proto=LCP) /
                  PPP_LCP_Protocol_Reject(code=Protocol_Reject, id=ident+1, rejected_protocol=IPV6CP,
                                          rejected_information=pkt[PPP].payload))
            print('Server->Client   |   Protocol Reject IPV6CP')

def terminateConnection():
    sendp(eth_session /
          PPPoE(sessionid=session_id) /
          PPP(proto=LCP) /
          PPP_LCP_Terminate())
    print('Server->Client   |   Terminate Connection')

def isNotOutgoing(pkt):
    if pkt.haslayer(Ether):
        return pkt[Ether].src != mac_server
    return False

if __name__ == '__main__':
    conf.verb = 0  # Suppress Scapy output
    print(show_interfaces())
    iface = IFACES.dev_from_index(input('index < '))
    mac_server = get_if_hwaddr(iface)
    print('Waiting for packets')
    sniff(prn=packet_callback, iface=iface, filter='pppoed or pppoes', lfilter=isNotOutgoing)
